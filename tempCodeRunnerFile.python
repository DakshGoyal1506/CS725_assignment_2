def min_vertex_cover(tree, root):
    # tree is represented as an adjacency list
    from collections import defaultdict
    import sys
    sys.setrecursionlimit(10**7)

    dp_in = {}
    dp_out = {}
    
    def dfs(u, parent):
        dp_in[u] = 1  # Include u
        dp_out[u] = 0  # Exclude u
        for v in tree[u]:
            if v != parent:  # Ensure we don't revisit the parent
                dfs(v, u)
                dp_in[u] += min(dp_in[v], dp_out[v])
                dp_out[u] += dp_in[v]
    
    dfs(root, -1)
    return min(dp_in[root], dp_out[root])

# Example Usage:
# Suppose the tree is represented as follows:
tree = {
    1: [2, 5],
    2: [1, 3],
    3: [2],
    4: [5],
    5: [1,4,6],
    6: [5,7],
    7: [6]
}
root = 1
print(min_vertex_cover(tree, root))  # Output will be the size of the smallest vertex cover
